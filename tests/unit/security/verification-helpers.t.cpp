/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2013-2019 Regents of the University of California.
 *
 * This file is part of ndn-cxx library (NDN C++ library with eXperimental eXtensions).
 *
 * ndn-cxx library is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later version.
 *
 * ndn-cxx library is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received copies of the GNU General Public License and GNU Lesser
 * General Public License along with ndn-cxx, e.g., in COPYING.md file.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * See AUTHORS.md for complete list of ndn-cxx authors and contributors.
 */

#include "ndn-cxx/security/verification-helpers.hpp"
#include "ndn-cxx/security/transform/public-key.hpp"
// #include "ndn-cxx/util/string-helper.hpp"

#include "tests/boost-test.hpp"
#include "tests/identity-management-fixture.hpp"
#include "tests/make-interest-data.hpp"

#include <boost/mpl/vector.hpp>
#include <iostream>

namespace ndn {
namespace security {
namespace tests {

using namespace ndn::tests;

BOOST_AUTO_TEST_SUITE(Security)
BOOST_AUTO_TEST_SUITE(TestVerificationHelpers)

// Using this test case to generate dataset if signature format changes
// BOOST_FIXTURE_TEST_CASE(Generator, IdentityManagementFixture)
// {
//   Identity wrongIdentity = addIdentity("/Security/TestVerificationHelpers/Wrong");
//   std::map<std::string, SigningInfo> identities = {
//     {"Ecdsa", signingByIdentity(addIdentity("/Security/TestVerificationHelpers/EC", EcKeyParams()))},
//     {"Rsa", signingByIdentity(addIdentity("/Security/TestVerificationHelpers/RSA", RsaKeyParams()))},
//     {"Sha256", signingWithSha256()}
//   };
//
//   auto print = [] (const std::string& name, const uint8_t* buf, size_t size) {
//     std::cout << "  std::vector<uint8_t> " + name + " = {\n    ";
//
//     std::string hex = toHex(buf, size);
//
//     for (size_t i = 0; i < hex.size(); i++) {
//       if (i > 0 && i % 32 == 0)
//         std::cout << "\n    ";
//
//       std::cout << "0x" << hex[i];
//       std::cout << hex[++i];
//
//       if ((i + 1) != hex.size())
//         std::cout << ", ";
//     }
//     std::cout << "\n  };";
//   };
//
//   for (const auto& i : identities) {
//     const std::string& type = i.first;
//     const SigningInfo& signingInfo = i.second;
//
//     std::cout << "struct " + type + "Dataset\n{\n";
//     std::cout << "  const std::string name = \"" << type << "\";\n";
//
//     if (signingInfo.getSignerType() == SigningInfo::SIGNER_TYPE_ID) {
//       print("cert", signingInfo.getPibIdentity().getDefaultKey().getDefaultCertificate().wireEncode().wire(),
//             signingInfo.getPibIdentity().getDefaultKey().getDefaultCertificate().wireEncode().size());
//     }
//     else {
//       print("cert", nullptr, 0);
//     }
//     std::cout << "\n";
//
//     // Create data that can be verified by cert
//     Data data(Name("/test/data").append(type));
//     m_keyChain.sign(data, signingInfo);
//     print("goodData", data.wireEncode().wire(), data.wireEncode().size());
//     std::cout << "\n";
//
//     // Create data that cannot be verified by cert
//     m_keyChain.sign(data, signingByIdentity(wrongIdentity));
//     print("badSigData", data.wireEncode().wire(), data.wireEncode().size());
//     std::cout << "\n";
//
//     // Create interest that can be verified by cert
//     Interest interest(Name("/test/interest/").append(type));
//     m_keyChain.sign(interest, signingInfo);
//     print("goodInterest", interest.wireEncode().wire(), interest.wireEncode().size());
//     std::cout << "\n";
//
//     // Create interest that cannot be verified by cert
//     m_keyChain.sign(interest, signingByIdentity(wrongIdentity));
//     print("badSigInterest", interest.wireEncode().wire(), interest.wireEncode().size());
//     std::cout << "\n};\n\n";
//   }
// }

struct EcdsaDataset
{
  const std::string name = "Ecdsa";
  std::vector<uint8_t> cert = {
    0x06, 0xFD, 0x01, 0x62, 0x07, 0x47, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
    0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
    0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x02, 0x45, 0x43, 0x08, 0x03, 0x4B,
    0x45, 0x59, 0x08, 0x08, 0x1D, 0x52, 0x21, 0x36, 0x8B, 0x8C, 0x6A, 0x42, 0x08, 0x04, 0x73, 0x65,
    0x6C, 0x66, 0x08, 0x09, 0xFD, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x43, 0xB3, 0x14, 0x09, 0x18,
    0x01, 0x02, 0x19, 0x04, 0x00, 0x36, 0xEE, 0x80, 0x15, 0x5B, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07,
    0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01,
    0x07, 0x03, 0x42, 0x00, 0x04, 0xBB, 0x69, 0x09, 0x3F, 0x16, 0xC0, 0x68, 0x10, 0x83, 0x49, 0xED,
    0xEF, 0x1B, 0xA2, 0x16, 0x4B, 0x8C, 0xA7, 0x1D, 0x73, 0xB4, 0xC4, 0x7F, 0xA9, 0x14, 0xB0, 0x3F,
    0xD9, 0xAF, 0xC7, 0x2A, 0xD7, 0x17, 0x50, 0xB3, 0x92, 0x6A, 0x51, 0x63, 0xDB, 0xB5, 0xDF, 0x5E,
    0x86, 0xBF, 0x80, 0xAF, 0x76, 0x6D, 0x63, 0xF4, 0xD6, 0x65, 0xA9, 0x4E, 0x27, 0x3C, 0x63, 0xD1,
    0x8A, 0x59, 0x5C, 0x7B, 0xF6, 0x16, 0x67, 0x1B, 0x01, 0x03, 0x1C, 0x38, 0x07, 0x36, 0x08, 0x08,
    0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
    0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72,
    0x73, 0x08, 0x02, 0x45, 0x43, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0x1D, 0x52, 0x21, 0x36,
    0x8B, 0x8C, 0x6A, 0x42, 0xFD, 0x00, 0xFD, 0x26, 0xFD, 0x00, 0xFE, 0x0F, 0x31, 0x39, 0x37, 0x30,
    0x30, 0x31, 0x30, 0x31, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFD, 0x00, 0xFF, 0x0F, 0x32,
    0x30, 0x33, 0x39, 0x30, 0x36, 0x32, 0x31, 0x54, 0x32, 0x33, 0x30, 0x38, 0x33, 0x34, 0x17, 0x46,
    0x30, 0x44, 0x02, 0x20, 0x3F, 0x4D, 0xA0, 0xA4, 0x26, 0x81, 0xDD, 0x79, 0x07, 0x0B, 0xCF, 0xEA,
    0xAC, 0x52, 0x96, 0x59, 0x2E, 0xAC, 0xB2, 0xF5, 0x7C, 0xCA, 0xB3, 0xEA, 0x86, 0x6C, 0xDB, 0x28,
    0xF8, 0x3A, 0x3E, 0x18, 0x02, 0x20, 0x65, 0x58, 0x5B, 0x35, 0xA6, 0xFD, 0xDF, 0xBF, 0xCF, 0x5D,
    0x73, 0x07, 0x98, 0xE8, 0xBA, 0x9B, 0x98, 0xCA, 0x62, 0x13, 0x28, 0x42, 0x9E, 0xCC, 0x16, 0xDA,
    0xDB, 0xF0, 0xC3, 0xE2, 0x03, 0xC2
  };
  std::vector<uint8_t> goodData = {
    0x06, 0xA2, 0x07, 0x13, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x08, 0x05, 0x45, 0x63, 0x64, 0x73, 0x61, 0x14, 0x00, 0x15, 0x00, 0x16, 0x3D, 0x1B, 0x01, 0x03,
    0x1C, 0x38, 0x07, 0x36, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17,
    0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
    0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x02, 0x45, 0x43, 0x08, 0x03, 0x4B, 0x45, 0x59,
    0x08, 0x08, 0x1D, 0x52, 0x21, 0x36, 0x8B, 0x8C, 0x6A, 0x42, 0x17, 0x48, 0x30, 0x46, 0x02, 0x21,
    0x00, 0xB8, 0x8D, 0xBA, 0xE5, 0x04, 0x65, 0xA8, 0x0E, 0xB6, 0x3B, 0xA6, 0xD5, 0xBC, 0x08, 0xA9,
    0x2E, 0xF2, 0xF5, 0xA0, 0x4E, 0x1A, 0x02, 0x98, 0x0B, 0x55, 0xCA, 0x05, 0x4C, 0x5F, 0x24, 0x79,
    0xE0, 0x02, 0x21, 0x00, 0xDE, 0x4A, 0x35, 0x9D, 0xDF, 0x59, 0xA9, 0xF2, 0xD0, 0xFE, 0x5B, 0xFA,
    0xB8, 0xE9, 0x6C, 0xFB, 0x17, 0x7A, 0x57, 0xD7, 0x9C, 0x84, 0x12, 0xF4, 0x55, 0x62, 0xBF, 0x7D,
    0x19, 0x7E, 0x17, 0x11
  };
  std::vector<uint8_t> badSigData = {
    0x06, 0xA3, 0x07, 0x13, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x08, 0x05, 0x45, 0x63, 0x64, 0x73, 0x61, 0x14, 0x00, 0x15, 0x00, 0x16, 0x40, 0x1B, 0x01, 0x03,
    0x1C, 0x3B, 0x07, 0x39, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17,
    0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
    0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08, 0x03,
    0x4B, 0x45, 0x59, 0x08, 0x08, 0x7D, 0xF4, 0x52, 0xD8, 0x55, 0x81, 0x9C, 0x44, 0x17, 0x46, 0x30,
    0x44, 0x02, 0x20, 0x59, 0x9E, 0xC9, 0x25, 0xD1, 0xE8, 0x84, 0xD8, 0x4E, 0xDA, 0x94, 0xA7, 0xFA,
    0x3E, 0xA7, 0xD3, 0xA9, 0xB1, 0xC8, 0x17, 0x3E, 0x96, 0x6C, 0x64, 0x23, 0x96, 0xA7, 0xD2, 0x9F,
    0xE9, 0xAF, 0x76, 0x02, 0x20, 0x17, 0x45, 0x3F, 0x8B, 0xBE, 0xB8, 0xFD, 0x56, 0x2C, 0x7A, 0x4A,
    0x42, 0x51, 0xB6, 0xC5, 0x69, 0xB1, 0x17, 0x93, 0xF7, 0xC1, 0x0A, 0xC8, 0x16, 0x76, 0xC4, 0x02,
    0x08, 0xE8, 0xAD, 0xA6, 0xE8
  };
  std::vector<uint8_t> goodInterest = {
    0x05, 0xDF, 0x07, 0x39, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x08, 0x05, 0x45, 0x63, 0x64, 0x73, 0x61, 0x02, 0x20, 0xE7, 0x3B, 0x27,
    0x63, 0xCF, 0x02, 0x4B, 0x3D, 0xE6, 0xBC, 0x2A, 0x51, 0x3A, 0x24, 0xC2, 0xC4, 0xA9, 0x16, 0x0D,
    0xC6, 0x8C, 0xBD, 0xEB, 0x62, 0xEC, 0x5E, 0xBF, 0x49, 0xF8, 0x97, 0x78, 0x59, 0x0A, 0x04, 0xEC,
    0xE4, 0xE6, 0xA5, 0x24, 0x00, 0x2C, 0x51, 0x1B, 0x01, 0x03, 0x1C, 0x38, 0x07, 0x36, 0x08, 0x08,
    0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
    0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72,
    0x73, 0x08, 0x02, 0x45, 0x43, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0x1D, 0x52, 0x21, 0x36,
    0x8B, 0x8C, 0x6A, 0x42, 0x28, 0x08, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x09, 0x2A, 0x08,
    0x00, 0x00, 0x7F, 0x14, 0xD4, 0xBC, 0x92, 0x68, 0x2E, 0x47, 0x30, 0x45, 0x02, 0x20, 0x5F, 0x4A,
    0xCC, 0xC8, 0xB6, 0xA3, 0xF3, 0x57, 0x43, 0xD7, 0xC2, 0xC7, 0x50, 0xC5, 0x55, 0x8F, 0x5A, 0xDC,
    0x0B, 0x38, 0xEF, 0x4B, 0xC1, 0x8A, 0x54, 0xD1, 0x69, 0xB8, 0xD4, 0xD2, 0xB9, 0x97, 0x02, 0x21,
    0x00, 0x93, 0x29, 0x50, 0x2E, 0x87, 0x82, 0xE3, 0x5B, 0xA0, 0xA0, 0x4B, 0x75, 0x38, 0x32, 0x25,
    0x3E, 0x93, 0x96, 0x60, 0x8A, 0x22, 0x71, 0xC6, 0x9D, 0x38, 0x39, 0x85, 0x2E, 0xD3, 0x32, 0x31,
    0xB2
  };
  std::vector<uint8_t> badSigInterest = {
    0x05, 0xEB, 0x07, 0x39, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x08, 0x05, 0x45, 0x63, 0x64, 0x73, 0x61, 0x02, 0x20, 0xFC, 0x7E, 0x74,
    0xAA, 0xE9, 0x45, 0xEB, 0x90, 0xF6, 0x70, 0x0E, 0x41, 0x63, 0xBA, 0x5E, 0x74, 0x0B, 0x96, 0x53,
    0x92, 0xDC, 0xD7, 0x8D, 0xCC, 0x47, 0xEF, 0xAD, 0x04, 0x51, 0xB9, 0x0B, 0xBE, 0x0A, 0x04, 0xEC,
    0xE4, 0xE6, 0xA5, 0x24, 0x00, 0x2C, 0x5E, 0x1B, 0x01, 0x03, 0x1C, 0x3B, 0x07, 0x39, 0x08, 0x08,
    0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
    0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72,
    0x73, 0x08, 0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0x7D,
    0xF4, 0x52, 0xD8, 0x55, 0x81, 0x9C, 0x44, 0x26, 0x08, 0x4A, 0xDB, 0xDB, 0x97, 0xB8, 0x5C, 0xCE,
    0x1B, 0x28, 0x08, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x09, 0x2A, 0x08, 0x00, 0x00, 0x7F,
    0x14, 0xD4, 0xBC, 0x92, 0x69, 0x2E, 0x46, 0x30, 0x44, 0x02, 0x20, 0x63, 0xD4, 0x3A, 0x70, 0x13,
    0xE2, 0x21, 0x7D, 0x67, 0x45, 0x68, 0xEB, 0x95, 0xC3, 0x5A, 0xEB, 0x9A, 0xAD, 0x08, 0xF8, 0xA3,
    0xAC, 0xE2, 0x22, 0x64, 0x87, 0xFF, 0x6D, 0x7D, 0x69, 0x25, 0x26, 0x02, 0x20, 0x58, 0xD6, 0x4A,
    0x65, 0xE2, 0x22, 0x3B, 0x67, 0x68, 0xE8, 0x24, 0x3B, 0x3E, 0x96, 0xB5, 0x7B, 0x5E, 0x69, 0x4A,
    0xBE, 0xD5, 0x34, 0x8E, 0xCF, 0xF0, 0x11, 0x8B, 0x41, 0x9E, 0xE7, 0x6B, 0xD7
  };
};

struct RsaDataset
{
  const std::string name = "Rsa";
  std::vector<uint8_t> cert = {
    0x06, 0xFD, 0x02, 0xED, 0x07, 0x48, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
    0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
    0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x03, 0x52, 0x53, 0x41, 0x08, 0x03,
    0x4B, 0x45, 0x59, 0x08, 0x08, 0xB3, 0x30, 0x3B, 0x20, 0x0A, 0x4F, 0x89, 0xA0, 0x08, 0x04, 0x73,
    0x65, 0x6C, 0x66, 0x08, 0x09, 0xFD, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x07, 0x14, 0x09,
    0x18, 0x01, 0x02, 0x19, 0x04, 0x00, 0x36, 0xEE, 0x80, 0x15, 0xFD, 0x01, 0x26, 0x30, 0x82, 0x01,
    0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00,
    0x03, 0x82, 0x01, 0x0F, 0x00, 0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xD9, 0xEF,
    0xF4, 0xA6, 0x61, 0x65, 0x9A, 0x32, 0x3B, 0x66, 0xC9, 0x83, 0x0A, 0x74, 0x13, 0x2D, 0x76, 0x17,
    0xB5, 0xAA, 0x81, 0x4C, 0xEB, 0xEB, 0xDF, 0x6F, 0xEA, 0x1C, 0xBA, 0xD9, 0x05, 0xB7, 0xCC, 0x10,
    0xF9, 0x71, 0xB9, 0x07, 0x11, 0xAE, 0xA8, 0xC4, 0x13, 0x76, 0x17, 0x07, 0x7A, 0x8C, 0x80, 0x92,
    0xEF, 0xF4, 0xE0, 0xCD, 0x30, 0x75, 0xE8, 0x36, 0x51, 0x4F, 0x3D, 0xB2, 0x8E, 0xA8, 0x9C, 0xD3,
    0x81, 0x4C, 0x7C, 0xF4, 0x50, 0xC8, 0xEE, 0xD9, 0xDD, 0x39, 0x66, 0xD0, 0xC0, 0xCC, 0xFE, 0x65,
    0x3E, 0xF1, 0x57, 0x0B, 0x20, 0x6A, 0x28, 0xCF, 0x24, 0x97, 0xB4, 0xBD, 0x13, 0xEC, 0x24, 0x48,
    0x04, 0x94, 0x10, 0xE2, 0x5C, 0x6F, 0x69, 0x7E, 0x28, 0x54, 0x6F, 0xD2, 0xA7, 0x2B, 0xCF, 0x64,
    0xD7, 0x98, 0x78, 0xE7, 0xC0, 0x92, 0x29, 0x15, 0xB8, 0xFA, 0xA9, 0x73, 0xFA, 0x31, 0x57, 0xB0,
    0x1D, 0x42, 0x77, 0x01, 0x0D, 0xA4, 0x6F, 0x00, 0x93, 0x65, 0x43, 0x0B, 0x77, 0x39, 0xAA, 0xB6,
    0xBA, 0xC2, 0x46, 0x01, 0x78, 0x5E, 0xC3, 0xE6, 0xE6, 0x34, 0x87, 0x81, 0xA0, 0x6F, 0x10, 0x30,
    0xBA, 0x48, 0x2E, 0x4F, 0xBF, 0x7A, 0x34, 0xBE, 0x1C, 0xBD, 0xF8, 0xA3, 0x1C, 0xBC, 0x30, 0xE5,
    0xB5, 0xA8, 0x8E, 0xEE, 0xA4, 0x01, 0x2A, 0x8A, 0xFC, 0xDA, 0xAE, 0xF8, 0x97, 0x3E, 0xF2, 0x1E,
    0x75, 0xAD, 0xC2, 0xCA, 0xCD, 0x7E, 0x86, 0xFF, 0x90, 0xB6, 0x39, 0xA9, 0x14, 0x32, 0xC2, 0xF7,
    0xF0, 0xDF, 0x34, 0xFA, 0x65, 0x99, 0x90, 0x60, 0x3E, 0x36, 0x00, 0x19, 0x44, 0xAA, 0xB7, 0x72,
    0xA4, 0x42, 0x79, 0x34, 0x94, 0x12, 0x42, 0xA0, 0x44, 0x73, 0x65, 0x70, 0x68, 0x5C, 0x4C, 0xD5,
    0x97, 0x82, 0x4C, 0x33, 0x9A, 0x9F, 0x10, 0x2D, 0xA7, 0x2F, 0x9D, 0x12, 0x40, 0xD9, 0x02, 0x03,
    0x01, 0x00, 0x01, 0x16, 0x68, 0x1B, 0x01, 0x01, 0x1C, 0x39, 0x07, 0x37, 0x08, 0x08, 0x53, 0x65,
    0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69,
    0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08,
    0x03, 0x52, 0x53, 0x41, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0xB3, 0x30, 0x3B, 0x20, 0x0A,
    0x4F, 0x89, 0xA0, 0xFD, 0x00, 0xFD, 0x26, 0xFD, 0x00, 0xFE, 0x0F, 0x31, 0x39, 0x37, 0x30, 0x30,
    0x31, 0x30, 0x31, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0xFD, 0x00, 0xFF, 0x0F, 0x32, 0x30,
    0x33, 0x39, 0x30, 0x36, 0x32, 0x31, 0x54, 0x32, 0x33, 0x30, 0x38, 0x33, 0x34, 0x17, 0xFD, 0x01,
    0x00, 0x3B, 0xFA, 0x53, 0x62, 0x65, 0x34, 0x15, 0x7C, 0xEF, 0x63, 0x71, 0xB8, 0xD0, 0x78, 0x34,
    0x0D, 0x0C, 0xED, 0x20, 0x53, 0x2F, 0x39, 0xF0, 0x1A, 0x15, 0x4F, 0x22, 0x44, 0x51, 0x35, 0xAF,
    0x46, 0xB1, 0xC4, 0x4D, 0x38, 0xF9, 0xCE, 0xDC, 0x01, 0x7A, 0xF3, 0x96, 0x59, 0x5C, 0xB3, 0x88,
    0xBE, 0xF8, 0xA4, 0x8F, 0xB8, 0x09, 0x94, 0x3A, 0x18, 0x6A, 0x66, 0xE3, 0x65, 0x0B, 0x23, 0x30,
    0x4A, 0x88, 0x46, 0x17, 0x5F, 0x8E, 0x51, 0xB7, 0xD7, 0x21, 0xA6, 0x9C, 0x40, 0x9F, 0xC2, 0xBD,
    0xE7, 0x29, 0xE3, 0xF8, 0x05, 0xC8, 0xBE, 0x99, 0x57, 0xE5, 0x9A, 0xA9, 0x6C, 0x66, 0xD0, 0xA2,
    0xC2, 0xDD, 0x43, 0x7F, 0x28, 0xCE, 0x6A, 0xD1, 0x93, 0x90, 0xB4, 0x02, 0x97, 0x28, 0xE3, 0xFC,
    0x19, 0xA4, 0x51, 0xA4, 0x42, 0x53, 0xEC, 0xF5, 0x8C, 0x3F, 0x91, 0xEF, 0x92, 0xA9, 0x2C, 0x21,
    0xB4, 0xCD, 0xDA, 0x59, 0x25, 0xB7, 0x95, 0xE3, 0x49, 0xC1, 0x91, 0xB7, 0xAB, 0x96, 0xFA, 0x50,
    0x7B, 0xE3, 0xEE, 0x9D, 0x8C, 0xEB, 0xEE, 0xC8, 0x02, 0x83, 0x0B, 0xD7, 0xC3, 0x8E, 0x34, 0x06,
    0xA4, 0x3F, 0xE5, 0x3B, 0x87, 0x18, 0x97, 0x5F, 0xB6, 0xB2, 0xF7, 0x5D, 0x12, 0x6D, 0x86, 0x7D,
    0xF5, 0x5B, 0x46, 0x24, 0x41, 0x3F, 0xC4, 0xAD, 0x0C, 0x70, 0xB0, 0xAC, 0xED, 0x12, 0xC9, 0xDC,
    0xB9, 0x1D, 0x61, 0xED, 0xB7, 0x96, 0x4F, 0x03, 0x55, 0xBF, 0xEB, 0xBC, 0xDC, 0x66, 0xDF, 0x05,
    0x2C, 0xBD, 0xD1, 0x6A, 0xD2, 0x67, 0x13, 0x79, 0x81, 0x00, 0xC4, 0x7F, 0xBC, 0x57, 0xEA, 0x27,
    0xE1, 0x40, 0xD2, 0x25, 0x2A, 0xC2, 0xE3, 0x2C, 0x6D, 0xF8, 0xD4, 0x54, 0x8D, 0x6B, 0x2C, 0x4F,
    0xBE, 0x01, 0xBD, 0xEF, 0x36, 0xE2, 0x8F, 0x6B, 0x8D, 0x55, 0xBD, 0x6D, 0x6A, 0x09, 0xF7, 0x54,
    0x92
  };
  std::vector<uint8_t> goodData = {
    0x06, 0xFD, 0x01, 0x5B, 0x07, 0x11, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61,
    0x74, 0x61, 0x08, 0x03, 0x52, 0x73, 0x61, 0x14, 0x00, 0x15, 0x00, 0x16, 0x3E, 0x1B, 0x01, 0x01,
    0x1C, 0x39, 0x07, 0x37, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17,
    0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E,
    0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x03, 0x52, 0x53, 0x41, 0x08, 0x03, 0x4B, 0x45,
    0x59, 0x08, 0x08, 0xB3, 0x30, 0x3B, 0x20, 0x0A, 0x4F, 0x89, 0xA0, 0x17, 0xFD, 0x01, 0x00, 0xBD,
    0x16, 0xFA, 0xC6, 0x01, 0x3D, 0xC1, 0x68, 0x1A, 0x28, 0x35, 0xAC, 0x16, 0xF6, 0x8E, 0x65, 0xC4,
    0xE1, 0x60, 0x78, 0x57, 0xC3, 0x15, 0x9F, 0xEE, 0x9D, 0x29, 0x9E, 0x36, 0x66, 0xAA, 0x76, 0xBA,
    0x60, 0x9C, 0x5A, 0x71, 0x5F, 0x8F, 0xC9, 0x16, 0xFF, 0xEF, 0xCA, 0xDF, 0xFC, 0xE9, 0xAD, 0x57,
    0x3C, 0x84, 0xB4, 0x06, 0x5A, 0x40, 0xA9, 0xEA, 0x39, 0xB9, 0x66, 0x9E, 0x4A, 0xA4, 0xF1, 0xE8,
    0xEC, 0xA5, 0xAB, 0x8C, 0x0B, 0x4A, 0xBF, 0x32, 0x20, 0x4F, 0xB6, 0xA1, 0x1C, 0x31, 0xDC, 0x96,
    0x87, 0x90, 0x9C, 0x52, 0xF0, 0x83, 0xEC, 0xE1, 0x4F, 0x26, 0xC9, 0x72, 0x40, 0x87, 0x8F, 0x0C,
    0x39, 0x9F, 0x16, 0xAE, 0xD0, 0x7F, 0xB2, 0x95, 0xF1, 0x0C, 0x09, 0xCF, 0xED, 0x7A, 0xA5, 0x3B,
    0x57, 0xAB, 0x4D, 0xFD, 0x8D, 0xA6, 0x75, 0x41, 0xE0, 0xB0, 0xC7, 0x17, 0x73, 0x93, 0xA0, 0x14,
    0xED, 0x9E, 0x1B, 0x60, 0x16, 0x6E, 0xA4, 0xF1, 0x47, 0xA3, 0xC8, 0x12, 0x4F, 0xBA, 0xDA, 0x59,
    0xED, 0xCC, 0xE4, 0xE4, 0x9C, 0xD5, 0xB1, 0x27, 0xAA, 0xBF, 0xF2, 0x16, 0x0D, 0x49, 0x1F, 0x07,
    0x10, 0x99, 0x68, 0xEA, 0xB3, 0x88, 0xB9, 0xF1, 0xCC, 0xEF, 0x97, 0x9B, 0xAB, 0xAD, 0x09, 0xD1,
    0x7D, 0xB1, 0xA2, 0xD9, 0x88, 0xF3, 0xDA, 0x7D, 0x18, 0xEE, 0xB2, 0xDB, 0xFA, 0xCC, 0x8A, 0xD0,
    0x67, 0xFE, 0x7D, 0x20, 0xD6, 0xB3, 0x30, 0xE3, 0xCD, 0x2D, 0xE4, 0xAD, 0x0A, 0xE1, 0xE2, 0x19,
    0x01, 0xF2, 0xF6, 0x9B, 0x85, 0xA6, 0x9E, 0x02, 0x8D, 0xAC, 0xE3, 0x88, 0xE7, 0x4C, 0xB0, 0xBC,
    0x54, 0x2F, 0x92, 0xEF, 0x54, 0x98, 0xF3, 0xEA, 0x92, 0x19, 0x88, 0xE8, 0x98, 0x7D, 0xBC, 0x28,
    0xA3, 0x68, 0xD8, 0x0C, 0x7B, 0x85, 0xB7, 0x3F, 0x15, 0x8C, 0x97, 0x1F, 0xFC, 0xD2, 0x2B
  };
  std::vector<uint8_t> badSigData = {
    0x06, 0xA2, 0x07, 0x11, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x08, 0x03, 0x52, 0x73, 0x61, 0x14, 0x00, 0x15, 0x00, 0x16, 0x40, 0x1B, 0x01, 0x03, 0x1C, 0x3B,
    0x07, 0x39, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65,
    0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65,
    0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08, 0x03, 0x4B, 0x45,
    0x59, 0x08, 0x08, 0x7D, 0xF4, 0x52, 0xD8, 0x55, 0x81, 0x9C, 0x44, 0x17, 0x47, 0x30, 0x45, 0x02,
    0x21, 0x00, 0x8C, 0x0C, 0xA8, 0x73, 0x2B, 0x2B, 0xC8, 0x9D, 0x5D, 0x31, 0x08, 0xC6, 0x24, 0x14,
    0xF9, 0xCE, 0xAF, 0x78, 0x73, 0xE9, 0xBE, 0x7C, 0xE9, 0xEB, 0x71, 0x74, 0xE9, 0x5E, 0x4F, 0x49,
    0xA8, 0x39, 0x02, 0x20, 0x26, 0x02, 0x87, 0x4F, 0x86, 0xB0, 0xFC, 0x13, 0x43, 0xFD, 0xB4, 0x54,
    0xA5, 0xBA, 0x55, 0xD0, 0x0D, 0x04, 0x56, 0x0B, 0xE4, 0xF8, 0xFF, 0xA5, 0xD4, 0xC7, 0x6C, 0x20,
    0xB9, 0xC8, 0xF9, 0x7E
  };
  std::vector<uint8_t> goodInterest = {
    0x05, 0xFD, 0x01, 0xA3, 0x07, 0x37, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E,
    0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x08, 0x03, 0x52, 0x73, 0x61, 0x02, 0x20, 0xD4, 0xBA, 0xB5,
    0xAE, 0xAB, 0x39, 0x83, 0x0E, 0xF1, 0x96, 0xD4, 0x48, 0x44, 0x9D, 0x00, 0xF6, 0x68, 0x1A, 0xD6,
    0xF0, 0x26, 0x8C, 0xD5, 0x59, 0x9B, 0xE5, 0xD6, 0x0A, 0xE2, 0x75, 0xC9, 0xB2, 0x0A, 0x04, 0xAB,
    0x84, 0xF0, 0x0F, 0x24, 0x00, 0x2C, 0x5C, 0x1B, 0x01, 0x01, 0x1C, 0x39, 0x07, 0x37, 0x08, 0x08,
    0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65,
    0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72,
    0x73, 0x08, 0x03, 0x52, 0x53, 0x41, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0xB3, 0x30, 0x3B,
    0x20, 0x0A, 0x4F, 0x89, 0xA0, 0x26, 0x08, 0xCE, 0x44, 0x60, 0x21, 0x00, 0x07, 0xAC, 0x6F, 0x28,
    0x08, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x0A, 0x2A, 0x08, 0x00, 0x00, 0x7F, 0x14, 0xD4,
    0xBC, 0x92, 0x6A, 0x2E, 0xFD, 0x01, 0x00, 0x45, 0x82, 0xEC, 0x66, 0x07, 0x77, 0xC3, 0x83, 0x46,
    0x51, 0x68, 0x0C, 0x98, 0xFF, 0x89, 0xBB, 0x88, 0x42, 0xD6, 0xC2, 0x11, 0xB1, 0x36, 0x54, 0x42,
    0x7F, 0x77, 0x68, 0x11, 0x12, 0x54, 0x73, 0x76, 0xED, 0x41, 0xB4, 0xDE, 0x6A, 0x72, 0xDB, 0xB5,
    0x46, 0xE8, 0xAE, 0x5A, 0xC4, 0x05, 0xEA, 0x36, 0xD1, 0xB2, 0xF8, 0xFB, 0x5D, 0xC9, 0x9C, 0xC4,
    0x4F, 0x10, 0x18, 0xDB, 0xB1, 0x06, 0xC1, 0xD2, 0xF6, 0x82, 0xB6, 0x09, 0xBD, 0xDB, 0x98, 0x02,
    0xA9, 0x73, 0x1A, 0xB7, 0xA0, 0x1E, 0xDF, 0x22, 0x2E, 0x28, 0x95, 0xC9, 0x90, 0x6E, 0xB2, 0xF4,
    0xBB, 0x05, 0x05, 0xD8, 0xF6, 0x97, 0xF8, 0x7B, 0xBD, 0x8B, 0xB7, 0x15, 0x0C, 0x03, 0xAC, 0x2A,
    0xA6, 0xBD, 0x67, 0x8E, 0x1C, 0x71, 0x0A, 0x5E, 0xC0, 0xFC, 0xD1, 0x01, 0xB6, 0xAC, 0x00, 0x78,
    0x23, 0x45, 0x60, 0x0E, 0x81, 0xF3, 0x23, 0x0B, 0x67, 0x05, 0xE4, 0x15, 0x31, 0xF2, 0x8C, 0x75,
    0x8B, 0x81, 0x3C, 0x95, 0x27, 0x3B, 0x94, 0xF4, 0xA4, 0x9E, 0x58, 0x0D, 0x4E, 0x23, 0x0B, 0x5D,
    0xA6, 0xFA, 0x47, 0x1D, 0xB2, 0xA6, 0x41, 0x0E, 0xD6, 0x44, 0x2E, 0x76, 0xD9, 0x36, 0xDB, 0x31,
    0xF7, 0xF7, 0x30, 0x84, 0xD2, 0xB1, 0xE2, 0xF1, 0xC5, 0x91, 0x38, 0x83, 0x6B, 0x86, 0x77, 0x4D,
    0xCE, 0x8D, 0xAF, 0x9E, 0xC4, 0x22, 0xF3, 0xB6, 0x40, 0xF9, 0x3D, 0xAF, 0xB2, 0x59, 0xA1, 0x16,
    0x27, 0x78, 0xEE, 0xB7, 0x17, 0x8D, 0x9C, 0xF0, 0x9A, 0x65, 0x8B, 0xB0, 0xEB, 0x09, 0x48, 0x20,
    0xC8, 0x8F, 0x42, 0x62, 0x2B, 0xE8, 0x4E, 0x3B, 0xB8, 0x21, 0xA1, 0xD5, 0x76, 0xA4, 0xC1, 0xB4,
    0x51, 0xED, 0x86, 0x8F, 0x7D, 0x1C, 0xA3, 0xFB, 0xBC, 0xEE, 0x53, 0xEA, 0x2D, 0x2E, 0x5B, 0xA4,
    0x0E, 0x05, 0xC9, 0xF7, 0xE4, 0xAD, 0xFC
  };
  std::vector<uint8_t> badSigInterest = {
    0x05, 0xE9, 0x07, 0x37, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x08, 0x03, 0x52, 0x73, 0x61, 0x02, 0x20, 0xC1, 0xC4, 0x8C, 0x0B, 0xB9,
    0x1A, 0x54, 0x8E, 0x33, 0x2F, 0x6C, 0xD4, 0x27, 0xB1, 0xFF, 0xFB, 0x18, 0xAC, 0x85, 0x3B, 0xA9,
    0x74, 0x3D, 0x7B, 0xA5, 0x9E, 0x60, 0x6B, 0x3F, 0x69, 0x70, 0x71, 0x0A, 0x04, 0xAB, 0x84, 0xF0,
    0x0F, 0x24, 0x00, 0x2C, 0x5E, 0x1B, 0x01, 0x03, 0x1C, 0x3B, 0x07, 0x39, 0x08, 0x08, 0x53, 0x65,
    0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69,
    0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08,
    0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0x7D, 0xF4, 0x52,
    0xD8, 0x55, 0x81, 0x9C, 0x44, 0x26, 0x08, 0xF2, 0x56, 0x1E, 0xCC, 0xDB, 0xCC, 0xC0, 0x15, 0x28,
    0x08, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x0A, 0x2A, 0x08, 0x00, 0x00, 0x7F, 0x14, 0xD4,
    0xBC, 0x92, 0x6B, 0x2E, 0x46, 0x30, 0x44, 0x02, 0x20, 0x10, 0xA5, 0xA7, 0x42, 0xB8, 0x52, 0x69,
    0x9E, 0xC7, 0xC9, 0x1A, 0x0E, 0x92, 0xA8, 0x65, 0xFD, 0x23, 0x21, 0xEA, 0x4F, 0x79, 0x3B, 0x30,
    0x1A, 0x45, 0x0F, 0x2D, 0x61, 0xB4, 0x6E, 0xF7, 0x92, 0x02, 0x20, 0x69, 0x86, 0x4B, 0x97, 0x05,
    0xE0, 0xC0, 0xE5, 0x23, 0xFE, 0x65, 0x01, 0x92, 0xF3, 0x6E, 0x94, 0x62, 0x55, 0x1D, 0x6A, 0x7F,
    0xC8, 0xD8, 0x2A, 0x7A, 0x29, 0x80, 0xF7, 0x06, 0xC2, 0x8D, 0x40
  };
};

struct Sha256Dataset
{
  const std::string name = "Sha256";
  std::vector<uint8_t> cert = {

  };
  std::vector<uint8_t> goodData = {
    0x06, 0x41, 0x07, 0x14, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x08, 0x06, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x14, 0x00, 0x15, 0x00, 0x16, 0x03, 0x1B, 0x01,
    0x00, 0x17, 0x20, 0xE2, 0xE2, 0x2F, 0x02, 0x70, 0xA7, 0xF7, 0x48, 0x70, 0x45, 0x29, 0x46, 0xBD,
    0xD2, 0x62, 0x24, 0xA6, 0x1E, 0x1D, 0x75, 0x2A, 0x26, 0x98, 0x04, 0xAD, 0x9C, 0x47, 0x63, 0xF8,
    0x98, 0x5A, 0x49
  };
  std::vector<uint8_t> badSigData = {
    0x06, 0xA6, 0x07, 0x14, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x04, 0x64, 0x61, 0x74, 0x61,
    0x08, 0x06, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x14, 0x00, 0x15, 0x00, 0x16, 0x40, 0x1B, 0x01,
    0x03, 0x1C, 0x3B, 0x07, 0x39, 0x08, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08,
    0x17, 0x54, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F,
    0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x73, 0x08, 0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08,
    0x03, 0x4B, 0x45, 0x59, 0x08, 0x08, 0x7D, 0xF4, 0x52, 0xD8, 0x55, 0x81, 0x9C, 0x44, 0x17, 0x48,
    0x30, 0x46, 0x02, 0x21, 0x00, 0xE5, 0xC3, 0x2B, 0x15, 0x07, 0x1C, 0x14, 0x1D, 0xF6, 0x02, 0xE7,
    0x49, 0xE2, 0xB9, 0x07, 0xAB, 0x2B, 0x1F, 0x24, 0x9F, 0xA5, 0x8F, 0xDC, 0x1E, 0xE1, 0x31, 0xCC,
    0xB4, 0x90, 0xE2, 0xD2, 0x1F, 0x02, 0x21, 0x00, 0xAA, 0xB8, 0x6A, 0x81, 0xF4, 0x46, 0x66, 0x87,
    0x7B, 0x5C, 0xFD, 0x9B, 0x6C, 0x1E, 0xD4, 0x02, 0xB4, 0xE8, 0xB0, 0x04, 0x70, 0x6D, 0xE3, 0x03,
    0x98, 0x2C, 0x51, 0x82, 0x45, 0x78, 0x57, 0xF5
  };
  std::vector<uint8_t> goodInterest = {
    0x05, 0x75, 0x07, 0x3A, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x08, 0x06, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x02, 0x20, 0x7A, 0xC7,
    0x2A, 0x97, 0x80, 0xB9, 0x30, 0x1E, 0x12, 0x4E, 0xA8, 0x78, 0xE1, 0x3B, 0x67, 0x60, 0x1F, 0x7D,
    0xCA, 0x4A, 0x79, 0x26, 0xE9, 0x5E, 0xF2, 0xE2, 0xD8, 0x78, 0x2B, 0xE4, 0x69, 0x7C, 0x0A, 0x04,
    0x4C, 0x5F, 0x57, 0xCA, 0x24, 0x00, 0x2C, 0x0D, 0x1B, 0x01, 0x00, 0x2A, 0x08, 0x00, 0x00, 0x7F,
    0xFF, 0x8E, 0x74, 0x68, 0x00, 0x2E, 0x20, 0x43, 0xFF, 0xF5, 0x92, 0x58, 0x4D, 0xD9, 0xD0, 0x48,
    0xEE, 0x6A, 0xE3, 0xAE, 0xA9, 0x2A, 0x1A, 0x93, 0xA7, 0x2E, 0xA9, 0xFA, 0xDE, 0x48, 0x2B, 0x2A,
    0x05, 0x19, 0xF2, 0xEB, 0x31, 0x84, 0x2F
  };
  std::vector<uint8_t> badSigInterest = {
    0x05, 0xEC, 0x07, 0x3A, 0x08, 0x04, 0x74, 0x65, 0x73, 0x74, 0x08, 0x08, 0x69, 0x6E, 0x74, 0x65,
    0x72, 0x65, 0x73, 0x74, 0x08, 0x06, 0x53, 0x68, 0x61, 0x32, 0x35, 0x36, 0x02, 0x20, 0x81, 0xC5,
    0xC0, 0xA3, 0x35, 0x50, 0xE3, 0x03, 0x3B, 0xBC, 0x3D, 0xFE, 0x0A, 0x32, 0x35, 0x81, 0x3C, 0x82,
    0x66, 0xE9, 0x65, 0x9C, 0x5C, 0x9C, 0x21, 0x05, 0x0B, 0x7A, 0x7F, 0x4F, 0xE3, 0x78, 0x0A, 0x04,
    0x4C, 0x5F, 0x57, 0xCA, 0x24, 0x00, 0x2C, 0x5E, 0x1B, 0x01, 0x03, 0x1C, 0x3B, 0x07, 0x39, 0x08,
    0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x08, 0x17, 0x54, 0x65, 0x73, 0x74, 0x56,
    0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x48, 0x65, 0x6C, 0x70, 0x65,
    0x72, 0x73, 0x08, 0x05, 0x57, 0x72, 0x6F, 0x6E, 0x67, 0x08, 0x03, 0x4B, 0x45, 0x59, 0x08, 0x08,
    0x7D, 0xF4, 0x52, 0xD8, 0x55, 0x81, 0x9C, 0x44, 0x26, 0x08, 0x83, 0xBB, 0x4C, 0x67, 0x90, 0x67,
    0x6E, 0x62, 0x28, 0x08, 0x00, 0x00, 0x01, 0x6B, 0x96, 0x0C, 0x44, 0x0A, 0x2A, 0x08, 0x00, 0x00,
    0x7F, 0xFF, 0x8E, 0x74, 0x68, 0x01, 0x2E, 0x46, 0x30, 0x44, 0x02, 0x20, 0x26, 0xC8, 0x8D, 0xF1,
    0xA6, 0xF4, 0x75, 0x98, 0x32, 0xF4, 0x9C, 0x6E, 0x81, 0x43, 0x1E, 0x1D, 0x3D, 0x49, 0x21, 0x45,
    0x3B, 0x05, 0x89, 0x37, 0x57, 0x3C, 0xFB, 0x42, 0x52, 0xA9, 0xB0, 0x42, 0x02, 0x20, 0x21, 0x08,
    0x3A, 0x39, 0x5A, 0x6E, 0x61, 0xEB, 0x08, 0xBB, 0xF3, 0x48, 0xA1, 0x21, 0xA3, 0x11, 0xE2, 0x63,
    0xC8, 0xCC, 0x4C, 0xB6, 0xCC, 0x1E, 0x1B, 0xB4, 0xDA, 0x9B, 0xFC, 0x7B, 0x3B, 0xE5
  };
};

// Note about the datasets:
// - .cert a valid certificate
// - .goodData is a data packet that can be verified by .cert
// - .badSigData a valid and signed data packet that cannot be verified by cert (signed by a
//   different private key)
// - .goodInterest is an interest packet that can be verified by .cert
// - .badSigInterest a valid and signed interest packet that cannot be verified by cert
//   (signed by a different private key)

using SignatureDatasets = boost::mpl::vector<EcdsaDataset, RsaDataset>;

BOOST_AUTO_TEST_CASE_TEMPLATE(VerifySignature, Dataset, SignatureDatasets)
{
  Dataset dataset;
  v2::Certificate cert(Block(dataset.cert.data(), dataset.cert.size()));
  Buffer keyRaw = cert.getPublicKey();
  transform::PublicKey key;
  key.loadPkcs8(keyRaw.data(), keyRaw.size());
  Data data(Block(dataset.goodData.data(), dataset.goodData.size()));
  Data badSigData(Block(dataset.badSigData.data(), dataset.badSigData.size()));
  Interest interest(Block(dataset.goodInterest.data(), dataset.goodInterest.size()));
  Interest badSigInterest(Block(dataset.badSigInterest.data(), dataset.badSigInterest.size()));

  BOOST_CHECK(verifySignature(data, key));
  BOOST_CHECK(verifySignature(data, keyRaw.data(), keyRaw.size()));
  BOOST_CHECK(verifySignature(data, cert));
  BOOST_CHECK(verifySignature(interest, key));
  BOOST_CHECK(verifySignature(interest, keyRaw.data(), keyRaw.size()));
  BOOST_CHECK(verifySignature(interest, cert));

  BOOST_CHECK(!verifySignature(badSigData, key));
  BOOST_CHECK(!verifySignature(badSigData, keyRaw.data(), keyRaw.size()));
  BOOST_CHECK(!verifySignature(badSigData, cert));
  BOOST_CHECK(!verifySignature(badSigInterest, key));
  BOOST_CHECK(!verifySignature(badSigInterest, keyRaw.data(), keyRaw.size()));
  BOOST_CHECK(!verifySignature(badSigInterest, cert));

  Data unsignedData("/some/data");
  Interest unsignedInterest1("/some/interest/with/several/name/components");
  Interest unsignedInterest2("/interest-with-one-name-component");

  BOOST_CHECK(!verifySignature(unsignedData, cert));
  BOOST_CHECK(!verifySignature(unsignedData, key));
  BOOST_CHECK(!verifySignature(unsignedInterest1, cert));
  BOOST_CHECK(!verifySignature(unsignedInterest1, key));
  BOOST_CHECK(!verifySignature(unsignedInterest2, cert));
  BOOST_CHECK(!verifySignature(unsignedInterest2, key));

  uint8_t invalidKey[] = {0x00, 0x00};
  BOOST_CHECK(!verifySignature(unsignedData, invalidKey, sizeof(invalidKey)));
  BOOST_CHECK(!verifySignature(unsignedInterest1, invalidKey, sizeof(invalidKey)));

  // - base version of verifySignature is tested transitively
  // - pib::Key version is tested as part of v2/key-chain.t.cpp (Security/V2/TestKeyChain)
}

using DigestDatasets = boost::mpl::vector<Sha256Dataset>;

BOOST_AUTO_TEST_CASE_TEMPLATE(VerifyDigest, Dataset, DigestDatasets)
{
  Dataset dataset;
  Data data(Block(dataset.goodData.data(), dataset.goodData.size()));
  Data badSigData(Block(dataset.badSigData.data(), dataset.badSigData.size()));
  Interest interest(Block(dataset.goodInterest.data(), dataset.goodInterest.size()));
  Interest badSigInterest(Block(dataset.badSigInterest.data(), dataset.badSigInterest.size()));

  BOOST_CHECK(verifyDigest(data, DigestAlgorithm::SHA256));
  BOOST_CHECK(verifyDigest(interest, DigestAlgorithm::SHA256));

  BOOST_CHECK(!verifyDigest(badSigData, DigestAlgorithm::SHA256));
  BOOST_CHECK(!verifyDigest(badSigInterest, DigestAlgorithm::SHA256));

  Data unsignedData("/some/data");
  Interest unsignedInterest1("/some/interest/with/several/name/components");
  Interest unsignedInterest2("/interest-with-one-name-component");

  BOOST_CHECK(!verifyDigest(unsignedData, DigestAlgorithm::SHA256));
  BOOST_CHECK(!verifyDigest(unsignedInterest1, DigestAlgorithm::SHA256));
  BOOST_CHECK(!verifyDigest(unsignedInterest2, DigestAlgorithm::SHA256));

  // - base version of verifyDigest is tested transitively
}

BOOST_AUTO_TEST_SUITE_END() // TestVerificationHelpers
BOOST_AUTO_TEST_SUITE_END() // Security

} // namespace tests
} // namespace security
} // namespace ndn
